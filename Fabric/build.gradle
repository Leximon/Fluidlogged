import com.modrinth.minotaur.dependencies.ModDependency
import groovy.json.JsonSlurper

plugins {
	id 'io.github.juuxel.loom-quiltflower' version '1.7.+'
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
	id 'com.modrinth.minotaur' version '2.+'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
}

archivesBaseName = mod_id
version = "${mod_version}-fabric-${mod_version_suffix}"

repositories {
	maven { url = "https://api.modrinth.com/maven" }
	maven { url = "https://maven.terraformersmc.com"}
	maven { url = "https://maven.shedaniel.me/" }
	maven { url = "https://dvs1.progwml6.com/files/maven/" }
	maven { url = "https://maven.parchmentmc.org" }
	maven { url = "https://maven.quiltmc.org/repository/release" }
	maven { url = "https://api.modrinth.com/maven" }
	maven { url = "https://maven.terraformersmc.com/releases/" }
	maven { url = "https://mvn.devos.one/snapshots/" }
	maven { url = "https://cursemaven.com" }
	maven { url = "https://maven.jamieswhiteshirt.com/libs-release" }
	maven { url = "https://jitpack.io/" }
	maven { url = "https://maven.tterrag.com/" }
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
	modImplementation "com.terraformersmc:modmenu:${modmenu_version}"
	modImplementation "com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}"
	modImplementation "com.electronwill.night-config:core:3.6.4"
	modImplementation "com.electronwill.night-config:toml:3.6.4"

	implementation project(path: ':Common', configuration: 'namedElements')
}

loom {
	shareCaches()
	runs {
		client {
			client()
			setConfigName("Fabric Client")
			ideConfigGenerated(true)
			runDir("run")
		}
		server {
			server()
			setConfigName("Fabric Server")
			ideConfigGenerated(true)
			runDir("run")
		}
	}
}

processResources {
	from project(':Common').sourceSets.main.resources
	inputs.property "version", mod_version

	filesMatching("fabric.mod.json") {
		expand "version": mod_version
	}

	filesMatching("${mod_id}.mixins.json") {
		expand "refmap_target": "${archivesBaseName}-"
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

tasks.withType(JavaCompile) {
	source(project(':Common').sourceSets.main.allSource)
}

// publishing to mod sites
modrinth {
	def slurper = new JsonSlurper()

	token = System.getenv("MODRINTH_TOKEN")
	projectId = "BnXpPaut"
	versionNumber = mod_version
	versionName = "Fluidlogged ${mod_version} Fabric"
	changelog = file("CHANGELOG.md").getText("UTF-8")
	uploadFile = remapJar
	gameVersions = slurper.parseText(mod_game_versions)
	loaders = ["fabric"]
	dependencies = [
			new ModDependency("P7dR8mSH", "required") // Fabric API
	]
}

curseforge {
	def slurper = new JsonSlurper()
	def gameVersions = slurper.parseText(mod_game_versions)

	apiKey = System.getenv("CURSEFORGE_TOKEN") ?: ""
	project {
		id = "620894"
		releaseType = "release"
		changelogType = "markdown"
		changelog = file("CHANGELOG.md")

		gameVersions.each { addGameVersion it }
		addGameVersion "Java 17"
		addGameVersion "Fabric"
		relations {
			requiredDependency "fabric-api" // Fabric API
		}

		mainArtifact(remapJar) {
			displayName = "[${gameVersions[0]}] Fluidlogged ${mod_version} Fabric"
		}
	}
	options {
		forgeGradleIntegration = false
	}
}

afterEvaluate {
	tasks.curseforge620894.dependsOn remapJar
}